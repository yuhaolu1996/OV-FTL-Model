import numpy as np
from sklearn import linear_model, datasets

def deleteoutliers(a,alpha,rep):
    # [B, IDX, OUTLIERS] = DELETEOUTLIERS(A, ALPHA, REP)
    #
    # For input vector A, returns a vector B with outliers (at the significance
    # level alpha) removed. Also, optional output argument idx returns the
    # indices in A of outlier values. Optional output argument outliers returns
    # the outlying values in A.
    #
    # ALPHA is the significance level for determination of outliers. If not
    # provided, alpha defaults to 0.05.
    #
    # REP is an optional argument that forces the replacement of removed
    # elements with NaNs to presereve the length of a. (Thanks for the
    # suggestion, Urs.)
    #
    # This is an iterative implementation of the Grubbs Test that tests one
    # value at a time. In any given iteration, the tested value is either the
    # highest value, or the lowest, and is the value that is furthest
    # from the sample mean. Infinite elements are discarded if rep is 0, or
    # replaced with NaNs if rep is 1 (thanks again, Urs).
    #
    # Appropriate application of the test requires that data can be reasonably
    # approximated by a normal distribution. For reference, see:
    # 1) "Procedures for Detecting Outlying Observations in Samples," by F.E.
    #    Grubbs; Technometrics, 11-1:1--21; Feb., 1969, and
    # 2) _Outliers in Statistical Data_, by V. Barnett and
    #    T. Lewis; Wiley Series in Probability and Mathematical Statistics;
    #    John Wiley & Sons; Chichester, 1994.
    # A good online discussion of the test is also given in NIST's Engineering
    # Statistics Handbook:
    # http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h.htm
    #
    # ex:
    # [B,idx,outliers] = deleteoutliers([1.1 1.3 0.9 1.2 -6.4 1.2 0.94 4.2 1.3 1.0 6.8 1.3 1.2], 0.05)
    #    returns:
    #    B = 1.1000    1.3000    0.9000    1.2000    1.2000    0.9400    1.3000    1.0000    1.3000    1.2000
    #    idx =  5     8    11
    #    outliers = -6.4000    4.2000    6.8000
    #
    # ex:
    # B = deleteoutliers([1.1 1.3 0.9 1.2 -6.4 1.2 0.94 4.2 1.3 1.0 6.8 1.3 1.2
    # Inf 1.2 -Inf 1.1], 0.05, 1)
    # returns:
    # B = 1.1000  1.3000  0.9000  1.2000  NaN  1.2000  0.9400  NaN  1.3000  1.0000  NaN  1.3000  1.2000  NaN  1.2000  NaN  1.1000
    # Written by Brett Shoelson, Ph.D.
    # shoelson@helix.nih.gov
    # 9/10/03
    # Modified 9/23/03 to address suggestions by Urs Schwartz.
    # Modified 10/08/03 to avoid errors caused by duplicate "maxvals."
    #    (Thanks to Valeri Makarov for modification suggestion.)

    if nargin == 1:
        alpha = 0.05;
        rep = 0;
    elif nargin == 2:
        rep = 0;
    #elif nargin == 3:
        #if not ismember(rep,[0 1]):
            #error('Please enter a 1 or a 0 for optional argument rep.')  
    elif nargin > 3:
        error('Requires 1,2, or 3 input arguments.');
    

    if isempty(alpha):
        alpha = 0.05;


    b = a;
    #b(isinf(a)) = NaN;

    #Delete outliers:
    outlier = 1;
    while outlier:
        tmp = b(~isnan(b));
        meanval = mean(tmp);
        maxval = tmp(find(abs(tmp-mean(tmp))==max(abs(tmp-mean(tmp)))));
        maxval = maxval(1);
        sdval = std(tmp);
        tn = abs((maxval-meanval)/sdval);
        critval = zcritical(alpha,length(tmp));
        outlier = tn > critval;
        if outlier:
            tmp = find(a == maxval);
            #b(tmp) = NaN;

    if nargout >= 2:
        idx = find(isnan(b));

    if nargout > 2:
        outliers = a(idx);

    #if not rep:
        #b=b(not isnan(b));
    
    return  [b, idx, outliers]

def zcritical(alpha,n):
    #ZCRIT = ZCRITICAL(ALPHA,N)
    #Computes the critical z value for rejecting outliers (GRUBBS TEST)
    tcrit = tinv(alpha/(2*n),n-2);
    zcrit = (n-1)/sqrt(n)*(sqrt(tcrit^2/(n-2+tcrit^2)));
    return zcrit


def identify_wave(velocity):
    standard_deviation = std2(velocity);    
    return standard_deviation


def get_traffic_speed(trajectory, time):
    #function to get the traffic speed in the model.
    #V = get_traffic_speed(trajectory) returns number which is the traffic
    #speed of this model simulation
    row,col=size(trajectory); # get the size of the input matrix
    sum=0; # initialize the sum of distance vehicles covered
    for i in range(1,col+1):      #loop over the columns of the matrix
        sum = sum + (trajectory(end,i)-trajectory(1,i));
        #sum up the distance covered

    avg = sum / col; # divide total distance by total number of vehicles
    velocity = avg / time;  #divide by time to get velocity.
    return velocity

def get_wave_speed(trajectory, dt):
    [rows,cols] = size(trajectory);
    velocity = zeros(rows, cols);
    for col in range(1,cols+1):  # loop over the columns
        for row in (1,rows+1): # loop over the rows
            velocity[row, col] = (trajectory(min(row+1,rows), col)- trajectory(max(row-1, 1), col))/(dt);
                #Use finite difference formula of first order derivative to compute the accelaration of each step.
    [rows, cols] = size(velocity);
    col=cols;        # Start from the last vehicle
    i=2;             # Start from the second row
    waves= [];       # Keep track of all the waves.
    time = [];       # Array for time storage
    position = [];   # Array for position storage
    wave_speeds = [];
    fig_count = 1;
    while(i<=rows):
        if((velocity(i, col) < velocity(max(i-1,1),col) and velocity(i,col)<velocity(min(i+1, cols), col) )):
            #check for local minimum of velocity
            time=[time, dt * i];    # append time
            position = [position, trajectory(i , col )]; #append position
            col = col - 1;  #move to the next column
            if col < 1:     #if the finish for all vehicles break the loop
                col = cols; # Start with the first vehicle which is the last column
                bls = robustfit(time, position);    # do robust linear regression to the time and position data points collected

                #---------------------------
                # computation of the linear regression lines on the plot 
                #x = time(1)-10:0.1:time(end)+10;    
                #y = bls(2)*x+bls(1);
                #---------------------------

                wave_speeds = [wave_speeds, bls(2)];        # store the computed wave speed for this iteration

                #---------------------------------
                fig_count = fig_count+1;
                time = [];
                position = [];
            
        i=i+1;  # go to next row in space
    end
    wave_speeds = wave_speeds(wave_speeds <-5);
    wave_speeds, a, b = deleteoutliers(wave_speeds, 0.1); #delete outliers of wavespeeds

    return abs(mean(wave_speeds)); # return the final answer

def randntrunc(m,n,c):
    #RANDNTRUNC Truncated normally distributed pseudorandom numbers.
    #   R = RANDNTRUNC(M,N,C) returns an M-by-N matrix containing
    #   pseudorandom values drawn from the standard normal
    #   distribution, with samples larger (in magnitude) than C
    #   discarded.
    if nargin<3:
        c = inf
    R = randn(m,n); # array of random samples
    while True: # loop until stopping criterion
        ind = abs(R)>c; # indices of unacceptable samples
        if ~nnz(ind):
            break  # if everything acceptable, break

        return randn(nnz(ind),1)
        #R(ind) =  randn(nnz(ind),1); # resample unacceptable entries

def micro_model_human_driver_behavior_circular(alpha , beta ):
    L = 230; # length of circular road [m]
    l = 4.82; # length of each vehicle [m]
    n = 22; # number of vehicles
    tf = 200; # final time of trajectory computation [s]
    dt_plot = 0.25; # size of plotting steps [s]
    
    Vm = 15;
    d0 = 2.23; # reference vehicle distance [m]
    V = lambda d : (tanh(d/d0-2)+tanh(2))/(1+tanh(2))*Vm; # optimal vel. fct. [m/s]
    # Note: Vm, d0 chosen s.t. initial velocity at equilibirum point.
    a = alpha; # optimal velocity strength [1/s]
    b = beta; # follow-the-leader strength [m^nu/s]
    nu = 2; # power of distance in denominator of follow-the-leader term
    dt_noise = 2; # time between two applications of noise [s]
    sigma = .25; # total amount of noise per second [m/s^2]
    
    d = (L/n)-l; # initial distance between adjacent vehicles
    p = np.linspace(0,(d+l)*(n-1),n) # initial positions of vehicles
    v = p*0+V(d); # initial velocities of vehicles
    dV = lambda d : (V(d+1e-7)-V(d-1e-7))/2e-7; # slope of opt. vel. fct. at equil.
    
    dist = lambda x: np.append(x[3:end:2],x(1)+L, axis = 0)-x[1:end:2]-l; # distance between vehicles
    R = lambda ~,x : reshape(np.transpose([x[2:end:2], b*(x([4:2:end][2])-x[2:end:2]/((dist(x))^nu))+a*(V(dist(x))-x[2:end:2])]),[],1);
    # ODE system # side function # right hand
    
    #####
    #Computation of Model
    #####
    
    ns = ceil(tf/dt_noise); # number of intervals (between them apply noise)
    sigma_dt = sqrt(dt_noise)*sigma; # amount of noise per interval
    x0 = np.transpose(reshape([p;v],[],1)); # initial state vector
    t = 0; # initialize time vector
    Y = x0; # initialize solution matrix
    
    for j in range(1,ns+1): # loop over intervals
        t_start = (j-1)*dt_noise; # start time of this interval
        t_end = min(j*dt_noise,tf); # end time of this interval
        dt_j = t_end-t_start; # length of this interval
        t_j = linspace(t_start,t_end,ceil(dt_j/dt_plot)+1); # int. time vector
        x0 = Y(end,:);          #  new initial condition is final state from sol. matrix
        x0(2:2:end) = x0(2:2:end)+randntrunc(1,n,3)*sigma_dt; # add noise
        x0(2:2:end) = max(x0(2:2:end),0); # cap new velocity from below by 0
        [~,Yj] = ode45(R,t_j,x0); # compute vehicle trajectories in interval
        if length(t_j)==2: # if time interval t_j has only 2 entries,
            Yj = Yj([1 end],:); # use only first and last solution values
        t = [t,t_j(2:end)]; # append time vector
        Y = [Y; Yj(2:end,:)]; # append solution matrix with new interval data
        
        
    P = mod([Y(:,1:2:end),Y(:,1:2:end)+L,Y(:,1:2:end)+2*L],3*L)-L;   # create
    P(P<-.5*L|P>1.5*L) = nan;        # copies of trajectories above and below
    
    veh_pos = Y(:,1:2:end); # positions of vehicles
    veh_dist = [veh_pos(:,2:end),veh_pos(:,1)+L]-veh_pos-l;
    min_dist = min(veh_dist,[],2); # minimum distance over time
    vel = Y(:,2:2:end); # velocities of vehicles
    min_vel = min(vel,[],2); # minimum velocity over time
    max_vel = max(vel,[],2);# maximum velocity over time
    
    v = get_traffic_speed(veh_pos(200:end,:) , tf);
    w = get_wave_speed(veh_pos, dt_plot);

    tupl = [v,w];

    return tupl
